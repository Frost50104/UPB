import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import config  # –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
import help_message

from telebot import types
from io import StringIO
from datetime import datetime
import requests


# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def handle_command_start(message: types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á',
    )

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—å–µ —Ñ–æ—Ç–æ —á–µ–π)
task_data = {}

# --- 1. –ö–æ–º–∞–Ω–¥–∞ /new_task (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
@bot.message_handler(commands=['new_task'])
def new_task(message):
    if message.from_user.id != config.ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, send_task_to_performers)

def send_task_to_performers(message):
    task_text = message.text
    for performer in config.performers_list:
        bot.send_message(performer, f"üìå *–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:*\n{task_text}", parse_mode="Markdown")
        bot.send_message(performer, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        task_data[performer] = {"task_text": task_text}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

# --- 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    user_id = message.from_user.id

    if user_id not in config.performers_list:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.")
        return

    photo = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    task_text = task_data.get(user_id, {}).get("task_text", "–ó–∞–¥–∞—á–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úî –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —á–∞—Ç
    bot.send_photo(config.control_chat_id, photo, caption=f"üìù *–ó–∞–¥–∞—á–∞:* {task_text}", parse_mode="Markdown", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ task_data
    task_data[user_id]["last_photo"] = photo

# --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_", "reject_")))
def process_verification(call):
    admin_id = call.from_user.id
    if admin_id != config.ADMIN_ID:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ñ–æ—Ç–æ.")
        return

    action, user_id = call.data.split("_")
    user_id = int(user_id)

    if action == "accept":
        bot.send_message(user_id, "‚úÖ *–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!*", parse_mode="Markdown")
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!")
    elif action == "reject":
        bot.send_message(user_id, "‚ö† –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ!")
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        request_new_photo(user_id)

# --- 4. –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
def request_new_photo(user_id):
    bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
