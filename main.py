import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
import config  # –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: TOKEN, ADMIN_ID, performers_list, control_chat_id, work_time, task_group_1
import help_message
import schedule
import time
import threading

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)


# ========= –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =========
@bot.message_handler(commands=['start'])
def handle_command_start(message: types.Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á")


@bot.message_handler(commands=['help'])
def handle_command_help(message: types.Message):
    bot.send_message(message.chat.id, help_message.help_msg, parse_mode="HTML")


@bot.message_handler(commands=['my_id'])
def handle_command_my_id(message: types.Message):
    bot.send_message(
        message.chat.id,
        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{message.from_user.first_name}</b> ({message.from_user.username}):\n<pre>{message.from_user.id}</pre>',
        parse_mode="HTML"
    )


@bot.message_handler(commands=['chat_id'])
def handle_command_chat_id(message: types.Message):
    bot.send_message(
        message.chat.id,
        f'ID —á–∞—Ç–∞:\n<pre>{message.chat.id}</pre>',
        parse_mode="HTML"
    )


# ========= –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 =========
def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    special_chars = r"\_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in special_chars else char for char in text)


# ========= –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ—Ç–æ =========
# –ö–ª—é—á–æ–º –±—É–¥–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ (control_message_id)
# –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏:
#    "user_id": ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è,
#    "user_message_id": ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º,
#    "control_chat_id": ID –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞,
#    "task_text": —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç)
task_data = {}


# ========= –†—É—á–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω–æ–º) =========
@bot.message_handler(commands=['new_task'])
def new_task(message):
    if message.from_user.id != config.ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return
    bot.send_message(message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, send_task_to_performers)


def send_task_to_performers(message):
    task_text = message.text
    for performer in config.performers_list:
        bot.send_message(performer, f"üìå *–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:*\n{task_text}", parse_mode="Markdown")
        bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è,
        # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è (–∑–¥–µ—Å—å –º—ã –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ task_data –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ)


# ========= –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é =========
def scheduled_send_tasks():
    tasks_message = "\n".join(config.task_group_1)
    for performer in config.performers_list:
        bot.send_message(performer, f"üìå *–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:*\n{tasks_message}", parse_mode="Markdown")
        bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        # –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –º—ã –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.


def schedule_jobs():
    for work_time in config.work_time:
        schedule.every().day.at(work_time).do(scheduled_send_tasks)
    while True:
        schedule.run_pending()
        time.sleep(1)


schedule_thread = threading.Thread(target=schedule_jobs)
schedule_thread.daemon = True
schedule_thread.start()


# ========= –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è =========
@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    user_id = message.from_user.id
    if user_id not in config.performers_list:
        bot.send_message(message.chat.id, "‚õî –í—ã –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.")
        return
    photo = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–∞–Ω–µ–µ)
    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    task_text = ""
    # –ï—Å–ª–∏ –≤ task_data –ø–æ –∫–ª—é—á—É user_id (–ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ) —Å–æ—Ö—Ä–∞–Ω—ë–Ω task_text, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ.
    # –ó–¥–µ—Å—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º task_text –≤ task_data, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ó–∞–¥–∞—á–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è".

    safe_task_text = escape_markdown_v2(task_text)
    username = message.from_user.username or f"ID: {user_id}"
    safe_username = escape_markdown_v2(username)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —á–∞—Ç.
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    sent_message = bot.send_photo(
        config.control_chat_id,
        photo,
        caption=f"üë§ {safe_username}",
        parse_mode="MarkdownV2"
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "+" –∏ "‚Äì", –∏—Å–ø–æ–ª—å–∑—É—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ.
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("+", callback_data=f"accept_{sent_message.message_id}_{user_id}"),
        InlineKeyboardButton("‚Äì", callback_data=f"reject_{sent_message.message_id}_{user_id}")
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è inline-–∫–Ω–æ–ø–∫–∏.
    bot.edit_message_reply_markup(chat_id=config.control_chat_id, message_id=sent_message.message_id,
                                  reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É —Ñ–æ—Ç–æ –≤ task_data (–∫–ª—é—á ‚Äî ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ).
    task_data[sent_message.message_id] = {
        "user_id": user_id,
        "user_message_id": message.message_id,  # ID —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        "control_chat_id": config.control_chat_id,
        "task_text": task_text
    }


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ =========
@bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_", "reject_")))
def process_verification(call):
    admin_id = call.from_user.id
    if admin_id != config.ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ñ–æ—Ç–æ.")
        return
    action, control_msg_id, user_id = call.data.split("_")
    control_msg_id = int(control_msg_id)
    user_id = int(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–æ—Ç–æ –∏–∑ task_data.
    if control_msg_id not in task_data:
        bot.answer_callback_query(call.id, "‚ö† –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    stored = task_data[control_msg_id]

    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ.
    try:
        bot.edit_message_reply_markup(chat_id=stored["control_chat_id"], message_id=control_msg_id, reply_markup=None)
    except telebot.apihelper.ApiTelegramException:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
        return

    if action == "accept":
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "+", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
        # –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º user_message_id) —Å —Ç–µ–∫—Å—Ç–æ–º "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ"
        bot.send_message(
            user_id,
            "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ",
            reply_to_message_id=stored["user_message_id"],
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!")
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∞–Ω–Ω–æ–º —Ñ–æ—Ç–æ –∏–∑ task_data
        del task_data[control_msg_id]
    elif action == "reject":
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "‚Äì", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ!"
        bot.send_message(
            user_id,
            "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ!",
            reply_to_message_id=stored["user_message_id"],
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∞–Ω–Ω–æ–º —Ñ–æ—Ç–æ –∏–∑ task_data
        del task_data[control_msg_id]
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.
        request_new_photo(user_id)


# ========= –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è =========
def request_new_photo(user_id):
    bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")


# ========= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =========
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)