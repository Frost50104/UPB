import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
import config  # –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
import help_message
import schedule
import time
import threading
import ast
import re
import importlib

from config import ADMIN_ID

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)
# –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ

# ========= –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 =========
def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    special_chars = r"\_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in special_chars else char for char in text)

# ========= –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =========
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in config.ADMIN_ID

# ========= –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =========


# ========= –ö–æ–º–∞–Ω–¥–∞ /delete_admin =========
@bot.message_handler(commands=['delete_admin'])
def handle_delete_admin(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete_admin"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete_admin")
    )

    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?", reply_markup=keyboard)

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_delete_admin", "cancel_delete_admin"])
def process_delete_admin_choice(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if call.data == "confirm_delete_admin":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        importlib.reload(config)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard = InlineKeyboardMarkup()
        admin_list = []

        for admin_id in config.ADMIN_ID:
            if admin_id == call.from_user.id:
                continue  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è!

            try:
                user = bot.get_chat(admin_id)
                username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                display_text = f"üë§ {first_name} ({username}) - {admin_id}"
            except telebot.apihelper.ApiTelegramException:
                display_text = f"‚ùå ID: {admin_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"

            admin_list.append(display_text)
            keyboard.add(InlineKeyboardButton(display_text, callback_data=f"delete_admin_{admin_id}"))

        if not admin_list:
            bot.send_message(call.message.chat.id, "‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", parse_mode="HTML")
            return

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join(admin_list),
            parse_mode="HTML",
            reply_markup=keyboard
        )

    elif call.data == "cancel_delete_admin":
        bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

# ========= –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.py =========
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_admin_"))
def process_admin_deletion(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        admin_id_to_delete = int(call.data.split("_")[2])
    except ValueError:
        bot.send_message(call.message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="HTML")
        return

    if admin_id_to_delete == call.from_user.id:
        bot.send_message(call.message.chat.id, "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è!", parse_mode="HTML")
        return

    # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ ADMIN_ID
    for i, line in enumerate(config_content):
        if line.strip().startswith("ADMIN_ID"):
            match = re.search(r"\[(.*?)\]", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            if admin_id_to_delete not in existing_ids_list:
                bot.send_message(call.message.chat.id, f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
                return

            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            existing_ids_list.remove(admin_id_to_delete)
            updated_ids = ", ".join(map(str, existing_ids_list))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ
            config_content[i] = f"ADMIN_ID = [{updated_ids}]\n"
            break
    else:
        bot.send_message(call.message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID <code>{admin_id_to_delete}</code> —É–¥–∞–ª–µ–Ω.",
        parse_mode="HTML"
    )

# ========= –ö–æ–º–∞–Ω–¥–∞ /add_admin =========
@bot.message_handler(commands=['add_admin'])
def handle_add_admin(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    importlib.reload(config)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_list = []
    for admin_id in config.ADMIN_ID:
        try:
            user = bot.get_chat(admin_id)
            username = f"@{user.username}" if user.username else f"ID: {admin_id}"
        except telebot.apihelper.ApiTelegramException:
            username = f"ID: {admin_id} (‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω)"

        admin_list.append(f"üë§ {username}")

    admin_text = "\n".join(admin_list) if admin_list else "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add_admin"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add_admin")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    bot.send_message(
        message.chat.id,
        f"üîπ <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n{admin_text}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_add_admin", "cancel_add_admin"])
def process_add_admin_choice(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if call.data == "confirm_add_admin":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(call.message.chat.id, "‚úè –£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        bot.register_next_step_handler(call.message, process_admin_id)

    elif call.data == "cancel_add_admin":
        bot.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =========
def process_admin_id(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ `ADMIN_ID` –≤ `config.py`."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        new_admin_id = int(message.text.strip())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int
    except ValueError:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /add_admin.")
        return

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω –≤ —Å–ø–∏—Å–∫–µ
    if new_admin_id in config.ADMIN_ID:
        bot.send_message(
            message.chat.id,
            f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_admin_id}</code> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="HTML"
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º `ADMIN_ID`
    for i, line in enumerate(config_content):
        if line.strip().startswith("ADMIN_ID"):
            match = re.search(r"\[(.*?)\]", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            existing_ids_list.append(new_admin_id)
            updated_ids = ", ".join(map(str, existing_ids_list))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ
            config_content[i] = f"ADMIN_ID = [{updated_ids}]\n"
            break
    else:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_admin_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        parse_mode="HTML"
    )


# ========= –ö–æ–º–∞–Ω–¥–∞ /auto_send =========
@bot.message_handler(commands=['auto_send'])
def handle_auto_send(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞—á –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    importlib.reload(config)

    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_work_time == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"
    schedule_list = "\n".join(config.work_time)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="change_auto_send"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_auto_send")
    )

    bot.send_message(
        message.chat.id,
        f"üìÖ *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{schedule_list}\n\n"
        f"üîÑ *–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:* {current_status}\n\n"
        f"–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["change_auto_send", "cancel_auto_send"])
def process_auto_send_change(call):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if call.data == "cancel_auto_send":
        bot.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    importlib.reload(config)

    new_status = "off" if config.status_work_time == "on" else "on"

    # –ß–∏—Ç–∞–µ–º config.py
    config_file = "config.py"
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–±–Ω–æ–≤–ª—è–µ–º `status_work_time`
    for i, line in enumerate(config_content):
        if line.strip().startswith("status_work_time"):
            config_content[i] = f"status_work_time = '{new_status}'\n"
            break

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    importlib.reload(config)

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    restart_scheduler()

    new_status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if new_status == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"
    bot.edit_message_text(f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {new_status_text}",
                          call.message.chat.id, call.message.message_id)


# ========= –ö–æ–º–∞–Ω–¥–∞ /delete_user =========
@bot.message_handler(commands=['delete_user'])
def handle_delete_user(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete_user"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete_user")
    )

    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?", reply_markup=keyboard)


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_delete_user", "cancel_delete_user"])
def process_delete_user_choice(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if call.data == "confirm_delete_user":
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞
        importlib.reload(config)

        keyboard = InlineKeyboardMarkup()
        for group_name, user_ids in config.performers.items():
            keyboard.add(InlineKeyboardButton(group_name, callback_data=f"select_group_for_delete_{group_name}"))

        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                              call.message.chat.id, call.message.message_id, reply_markup=keyboard)

    elif call.data == "cancel_delete_user":
        bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è =========
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_for_delete_"))
def process_group_selection_for_delete(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    selected_group = call.data.replace("select_group_for_delete_", "")

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py
    importlib.reload(config)

    user_ids = config.performers.get(selected_group, [])

    if not user_ids:
        bot.send_message(call.message.chat.id, f"üîπ –í –≥—Ä—É–ø–ø–µ {selected_group} –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup()
    user_list = []

    for user_id in user_ids:
        try:
            user = bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else f"–ë–µ–∑ username"
            first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            display_text = f"{first_name} ({username}) - {user_id}"
        except telebot.apihelper.ApiTelegramException:
            display_text = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω - {user_id}"

        user_list.append(display_text)
        keyboard.add(InlineKeyboardButton(display_text, callback_data=f"delete_user_{selected_group}_{user_id}"))

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ‚ùå "–û—Ç–º–µ–Ω–∞"
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_user_deletion"))

    bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ {selected_group}:\n" +
                     "\n".join(user_list), reply_markup=keyboard)

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–º–µ–Ω–∞" =========
@bot.callback_query_handler(func=lambda call: call.data == "cancel_user_deletion")
def cancel_user_deletion(call):
    bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

# ========= –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.py =========
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_user_"))
def process_user_deletion(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π print
    print(f"DEBUG: call.data = {call.data}")

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É **–ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—é**, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á—å –≥—Ä—É–ø–ø—É
        data_parts = call.data[len("delete_user_"):].rsplit("_", 1)
        if len(data_parts) != 2:
            raise ValueError("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")

        selected_group, user_id = data_parts
        user_id = int(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
    except ValueError as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ call.data -> {e}")
        bot.send_message(call.message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π print
    print(f"DEBUG: selected_group = {selected_group}, user_id = {user_id}")

    config_file = "config.py"

    # –ß–∏—Ç–∞–µ–º config.py
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –ö–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø
    group_mapping = {
        "–ì—Ä—É–ø–ø–∞ 1": "performers_list_1",
        "–ì—Ä—É–ø–ø–∞ 2": "performers_list_2",
        "–ì—Ä—É–ø–ø–∞ 3": "performers_list_3",
        "–ì—Ä—É–ø–ø–∞ 4": "performers_list_4",
        "–ì—Ä—É–ø–ø–∞ 5": "performers_list_5",
    }

    # ‚úÖ –¢–µ–ø–µ—Ä—å selected_group —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    if selected_group not in group_mapping:
        bot.send_message(call.message.chat.id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{selected_group}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py",
                         parse_mode="HTML")
        return

    target_list = group_mapping[selected_group]

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ config.py
    for i, line in enumerate(config_content):
        if line.strip().startswith(f"{target_list} = (") or line.strip().startswith(f"{target_list} = "):
            match = re.search(r"\((.*?)\)", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                existing_ids_list = []

            if user_id not in existing_ids_list:
                bot.send_message(call.message.chat.id, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {selected_group}.")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            existing_ids_list.remove(user_id)
            updated_ids = ", ".join(map(str, existing_ids_list))

            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏
            config_content[i] = f"{target_list} = ({updated_ids},)\n" if updated_ids else f"{target_list} = ()\n"
            break
    else:
        bot.send_message(call.message.chat.id, f"‚ö† –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ {target_list} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É –≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> —É–¥–∞–ª–µ–Ω –∏–∑ <b>{selected_group}</b>.",
        parse_mode="HTML"
    )


# ========= –ö–æ–º–∞–Ω–¥–∞ /add_user =========
@bot.message_handler(commands=['add_user'])
def handle_add_user(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_add_user"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_add_user")
    )

    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?", reply_markup=keyboard)


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["confirm_add_user", "cancel_add_user"])
def process_add_user_choice(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if call.data == "confirm_add_user":
        keyboard = InlineKeyboardMarkup()
        for group_name in config.performers.keys():
            keyboard.add(InlineKeyboardButton(group_name, callback_data=f"select_group_{group_name}"))

        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                              call.message.chat.id, call.message.message_id, reply_markup=keyboard)

    elif call.data == "cancel_add_user":
        bot.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã =========
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_"))
def process_group_selection(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    selected_group = call.data.replace("select_group_", "")
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{selected_group}*.\n\n–£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                     parse_mode="Markdown")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    bot.register_next_step_handler(call.message, lambda msg: process_user_id(msg, selected_group))


# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =========
def process_user_id(message, selected_group):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç config.py."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    try:
        new_user_id = int(message.text.strip())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    except ValueError:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /add_user.")
        return

    config_file = "config.py"

    # –ß–∏—Ç–∞–µ–º config.py
    with open(config_file, "r", encoding="utf-8") as file:
        config_content = file.readlines()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π performers_list_X –æ–±–Ω–æ–≤–ª—è—Ç—å
    group_mapping = {
        "–ì—Ä—É–ø–ø–∞ 1": "performers_list_1",
        "–ì—Ä—É–ø–ø–∞ 2": "performers_list_2",
        "–ì—Ä—É–ø–ø–∞ 3": "performers_list_3",
        "–ì—Ä—É–ø–ø–∞ 4": "performers_list_4",
        "–ì—Ä—É–ø–ø–∞ 5": "performers_list_5",
    }

    if selected_group not in group_mapping:
        bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ <b>{selected_group}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py",
                         parse_mode="HTML")
        return

    target_list = group_mapping[selected_group]

    # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
    for i, line in enumerate(config_content):
        if line.strip().startswith(f"{target_list} = (") or line.strip().startswith(f"{target_list} = "):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ ID
            match = re.search(r"\((.*?)\)", line)
            if match:
                existing_ids = match.group(1).strip()
                existing_ids_list = [int(x.strip()) for x in existing_ids.split(",") if x.strip().isdigit()]
            else:
                # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ —á–∏—Å–ª–æ (int), –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                existing_ids_list = []
                if "=" in line:
                    current_value = line.split("=")[1].strip()
                    if current_value.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ tuple
                        existing_ids_list.append(int(current_value))

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π ID
            if new_user_id in existing_ids_list:
                bot.send_message(message.chat.id,
                                 f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_user_id}</code> —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ <b>{selected_group}</b>.",
                                 parse_mode="HTML")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π ID –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ `tuple`
            existing_ids_list.append(new_user_id)
            updated_ids = ", ".join(map(str, existing_ids_list))
            config_content[i] = f"{target_list} = ({updated_ids},)\n"  # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º `tuple`
            break
    else:
        bot.send_message(message.chat.id, f"‚ö† –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ {target_list} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py", parse_mode="HTML")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py
    with open(config_file, "w", encoding="utf-8") as file:
        file.writelines(config_content)

    # üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ä–∞–∑—É —É–≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    importlib.reload(config)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID <code>{new_user_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ <b>{selected_group}</b>.",
        parse_mode="HTML"
    )

# ========= –ö–æ–º–∞–Ω–¥–∞ /set_time =========
@bot.message_handler(commands=['set_time'])
def handle_set_time(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π.")
        return

    # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    current_schedule = "\n".join(config.work_time)
    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_work_time == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"
    # bot.send_message(message.chat.id, f"üïí –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{current_schedule}\n ")

    bot.send_message(
        message.chat.id,
        f"üïí –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{current_schedule}\n \nüîÑ *–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:* {current_status}\n\n",
        parse_mode="Markdown",
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–Ω–æ–ø–æ–∫
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="change_time"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_time")
    )

    bot.send_message(message.chat.id, "–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π?", reply_markup=keyboard)



# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π "–î–∞" / "–ù–µ—Ç" =========
@bot.callback_query_handler(func=lambda call: call.data in ["change_time", "cancel_time"])
def process_time_change(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ)."""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    if call.data == "change_time":
        # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        bot.send_message(call.message.chat.id, "‚è≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM HH:MM HH:MM' (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        bot.register_next_step_handler(call.message, update_schedule)

    elif call.data == "cancel_time":
        bot.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)


# ========= –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `work_time` =========
def update_schedule(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –≤ `config.py` –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    new_times = message.text.strip().split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
    for time_value in new_times:
        if not time_value.count(":") == 1 or not all(x.isdigit() for x in time_value.split(":")):
            bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM HH:MM HH:MM'\n –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /set_time.")
            return

    # **–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º `work_time` –≤ config.py**
    config.work_time = new_times
    with open("config.py", "r") as file:
        lines = file.readlines()

    for i, line in enumerate(lines):
        if line.startswith("work_time"):
            lines[i] = f"work_time = {new_times}\n"

    with open("config.py", "w") as file:
        file.writelines(lines)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    importlib.reload(config)

    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if config.status_work_time == "on" else "‚õî –í—ã–∫–ª—é—á–µ–Ω–∞"

    bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ! –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n" + "\n".join(config.work_time))
    bot.send_message(
        message.chat.id,
        f"üîÑ *–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:* {current_status}\n\n",
        parse_mode="Markdown",
    )


    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    restart_scheduler()


# ========= –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é =========
def send_control_panel_tasks():
    for performers, tasks_text in config.control_panel.items():
        for performer in performers:
            try:
                bot.send_message(performer, f"üìå *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n{tasks_text}", parse_mode="Markdown")
                bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            except telebot.apihelper.ApiTelegramException as e:
                if "bot was blocked by the user" in str(e):
                    print(f"‚ö† –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {performer}.")
                else:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {performer}: {e}")



# ========= –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =========
def restart_scheduler():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    importlib.reload(config)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.py

    schedule.clear()

    if config.status_work_time == "off":
        print("‚õî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return  # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    for work_time in config.work_time:
        schedule.every().day.at(work_time).do(send_control_panel_tasks)

    print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {config.work_time}")

# # ========= –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =========
# def restart_scheduler():
#     """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏"""
#     schedule.clear()
#     for work_time in config.work_time:
#         schedule.every().day.at(work_time).do(send_control_panel_tasks)
#     print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {config.work_time}")


# ========= –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ =========
def schedule_jobs():
    while True:
        schedule.run_pending()
        time.sleep(30)

schedule_thread = threading.Thread(target=schedule_jobs)
schedule_thread.daemon = True
schedule_thread.start()

@bot.message_handler(commands=['start'])
def handle_command_start(message: types.Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á")
    bot.send_message(
        message.chat.id,
        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{message.from_user.first_name}</b> ({message.from_user.username}):\n<pre>{message.from_user.id}</pre>',
        parse_mode="HTML"
    )

@bot.message_handler(commands=['help'])
def handle_command_help(message: types.Message):
    bot.send_message(message.chat.id, help_message.help_msg, parse_mode="HTML")


@bot.message_handler(commands=['admins'])
def handle_command_admins(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞."""
    admin_list = []

    for admin_id in config.ADMIN_ID:
        try:
            user = bot.get_chat(admin_id)
            username = f"üë§ @{user.username}" if user.username else f"ID: {admin_id}"
        except telebot.apihelper.ApiTelegramException:
            username = f"üë§ ID: {admin_id} (‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –∏ ID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        admin_list.append(escape_markdown_v2(username))

    bot.send_message(
        chat_id=message.chat.id,
        text=f"üîπ *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n" + "\n".join(admin_list),
        parse_mode="MarkdownV2"
    )


@bot.message_handler(commands=['bot_users'])
def handle_bot_users(message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º."""

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ config.py
    importlib.reload(config)

    groups = {
        "–ì—Ä—É–ø–ø–∞ 1": config.performers_list_1,
        "–ì—Ä—É–ø–ø–∞ 2": config.performers_list_2,
        "–ì—Ä—É–ø–ø–∞ 3": config.performers_list_3,
        "–ì—Ä—É–ø–ø–∞ 4": config.performers_list_4,
        "–ì—Ä—É–ø–ø–∞ 5": config.performers_list_5,
    }

    response = []

    for group_name, users in groups.items():
        user_list = []
        for user_id in users:
            try:
                user = bot.get_chat(user_id)
                username = f"@{user.username}" if user.username else f"ID: {user_id}"
                user_list.append(f"üë§ {username}")
            except telebot.apihelper.ApiTelegramException:
                user_list.append(f"‚ö† ID: {user_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")

        if user_list:
            response.append(f"<b>{group_name}</b>:\n" + "\n".join(user_list))
        else:
            response.append(f"<b>{group_name}</b>:\n üîπ –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

    bot.send_message(message.chat.id, "\n\n".join(response), parse_mode="HTML")


@bot.message_handler(commands=['my_id'])
def handle_command_my_id(message: types.Message):
    bot.send_message(
        message.chat.id,
        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{message.from_user.first_name}</b> ({message.from_user.username}):\n<pre>{message.from_user.id}</pre>',
        parse_mode="HTML"
    )

@bot.message_handler(commands=['chat_id'])
def handle_command_chat_id(message: types.Message):
    bot.send_message(
        message.chat.id,
        f'ID —á–∞—Ç–∞:\n<pre>{message.chat.id}</pre>',
        parse_mode="HTML"
    )

# ========= –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö –∏ —Ñ–æ—Ç–æ =========
task_data = {}

# ========= –†—É—á–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω–æ–º) =========
@bot.message_handler(commands=['new_task'])
def new_task(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."""
    if not message.from_user.id in config.ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.")
        return

    bot.send_message(message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    bot.register_next_step_handler(message, send_task_to_performers)


def send_task_to_performers(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ '–æ—Ç–º–µ–Ω–∞'."""
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    task_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è

    for performers, tasks_text in config.control_panel.items():
        for performer in performers:
            try:
                bot.send_message(performer, f"üìå *–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:*\n{task_text}", parse_mode="Markdown")
                bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                task_data[performer] = {"task_text": task_text}
            except telebot.apihelper.ApiTelegramException as e:
                if "bot was blocked by the user" in str(e):
                    print(f"‚ö† –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {performer}.")
                else:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {performer}: {e}")


# ========= –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é =========
def send_control_panel_tasks():
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    for performers, tasks_text in config.control_panel.items():
        for performer in performers:
            try:
                bot.send_message(performer, f"üìå *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n{tasks_text}", parse_mode="Markdown")
                bot.send_message(performer, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                task_data[performer] = {"task_text": tasks_text}
            except telebot.apihelper.ApiTelegramException as e:
                if "bot was blocked by the user" in str(e):
                    print(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {performer}.")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {performer}: {e}")

def schedule_jobs():
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ work_time –ø–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    for work_time in config.work_time:
        schedule.every().day.at(work_time).do(send_control_panel_tasks)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
schedule_thread = threading.Thread(target=schedule_jobs)
schedule_thread.daemon = True
schedule_thread.start()

# ========= –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è =========
@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    user_id = message.from_user.id
    if user_id not in sum(config.control_panel.keys(), ()):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø
        bot.send_message(message.chat.id, "‚õî –í—ã –Ω–µ —á–∏—Å–ª–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    photo = message.photo[-1].file_id
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.
    task_text = task_data.get(user_id, {}).get("task_text", "")
    safe_task_text = escape_markdown_v2(task_text)
    username = message.from_user.username or f"ID: {user_id}"
    safe_username = escape_markdown_v2(username)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —á–∞—Ç –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = bot.send_photo(
        config.control_chat_id,
        photo,
        caption=f"üìù *–ó–∞–¥–∞—á–∞:* {safe_task_text}\nüë§ {safe_username}",
        parse_mode="MarkdownV2"
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "+" –∏ "‚Äì"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{sent_message.message_id}_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{sent_message.message_id}_{user_id}")
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(chat_id=config.control_chat_id, message_id=sent_message.message_id, reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ task_data (–∫–ª—é—á ‚Äì ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ)
    task_data[sent_message.message_id] = {
        "user_id": user_id,
        "user_message_id": message.message_id,
        "control_chat_id": config.control_chat_id,
        "task_text": task_text
    }

# ========= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º —á–∞—Ç–µ =========
@bot.callback_query_handler(func=lambda call: call.data.startswith(("accept_", "reject_")))
def process_verification(call):
    admin_id = call.from_user.id
    if not admin_id in config.ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ñ–æ—Ç–æ.")
        return
    action, control_msg_id, user_id = call.data.split("_")
    control_msg_id = int(control_msg_id)
    user_id = int(user_id)
    if control_msg_id not in task_data:
        bot.answer_callback_query(call.id, "‚ö† –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    stored = task_data[control_msg_id]
    try:
        bot.edit_message_reply_markup(chat_id=stored["control_chat_id"], message_id=control_msg_id, reply_markup=None)
    except telebot.apihelper.ApiTelegramException:
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
        return
    if action == "accept":
        bot.send_message(
            user_id,
            "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ",
            reply_to_message_id=stored["user_message_id"],
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!")
        del task_data[control_msg_id]
    elif action == "reject":
        bot.send_message(
            user_id,
            "–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ!",
            reply_to_message_id=stored["user_message_id"],
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        del task_data[control_msg_id]
        request_new_photo(user_id)

# ========= –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ =========
def request_new_photo(user_id):
    bot.send_message(user_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

# ========= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =========
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)